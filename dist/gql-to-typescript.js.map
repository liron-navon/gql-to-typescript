{"version":3,"sources":["webpack://gqlToTypescript/webpack/universalModuleDefinition","webpack://gqlToTypescript/webpack/bootstrap","webpack://gqlToTypescript/./src/helpers/files.ts","webpack://gqlToTypescript/external \"path\"","webpack://gqlToTypescript/external \"fs\"","webpack://gqlToTypescript/./src/helpers/gqlNodeTools.ts","webpack://gqlToTypescript/./src/index.ts","webpack://gqlToTypescript/external {\"commonjs\":\"graphql-tag\",\"commonjs2\":\"graphql-tag\",\"amd\":\"graphql-tag\"}","webpack://gqlToTypescript/external {\"commonjs\":\"glob\",\"commonjs2\":\"glob\",\"amd\":\"glob\"}","webpack://gqlToTypescript/./src/helpers/TypescriptFileWriter.ts","webpack://gqlToTypescript/./src/helpers/FileWriter.ts","webpack://gqlToTypescript/external {\"commonjs\":\"lodash/defaultsDeep\",\"commonjs2\":\"lodash/defaultsDeep\",\"amd\":\"lodash/defaultsDeep\"}"],"names":["root","factory","exports","module","require","define","amd","undefined","global","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__6__","__WEBPACK_EXTERNAL_MODULE__9__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","graphql_tag_1","path","fs","glob","getTypeDefsFromFile","fileContent","matches","exec","length","gqlTag","substr","lastIndexOf","indexOf","getFileNamesFromGlob","matcher","Promise","resolve","reject","err","fileNames","collectGQLTypeDefs","turnToNodeTree","then","map","filePath","readFileSync","filter","item","default","templateObject_1","__makeTemplateObject","ensureFileExistence","makeSureEmpty","dirname","existsSync","mkdirSync","recursive","options","flag","writeFileSync","getName","node","getTypeKind","type","kind","getDescription","description","getType","requiredValue","arguments","returnType","args","argNode","argName","_a","getTypeOptions","required","createTypeForFunction","getFieldKVP","ignoreFields","endsWith","substring","getEnumKVP","enumNode","output","values","val","getObjectKVP","objectNode","objectDescription","fields","forEach","field","kvp","arrayToTruthMapper","arr","files_1","gqlNodeTools_1","TypescriptFileWriter_1","defaultsDeep","defaultOptions","scalars","ignoreTypes","namespace","outputFile","silent","fileMessage","convert","typeDefs","ignoreMap","concat","typedValues","Boolean","String","ID","Int","Float","state","descriptionState","assignToState","doc","definitions","writer","TypescriptFileWriter","entries","Array","isArray","writeEnum","writeInterface","finish","getDefaultOption","assign","convertFiles","FileWriter_1","startMessage","this","fullFilePath","join","fw","FileWriter","appendLine","append","str","writeDescription","indentation","enumarations","descriptionMap","_this","e","fixTyping","unknownType","createAdvancedInterfaceField","label","rawType","advancedType","console","warn","createRegularInterfaceField","data","log","appendFileSync"],"mappings":"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","file":"gql-to-typescript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"graphql-tag\"), require(\"glob\"), require(\"lodash/defaultsDeep\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"graphql-tag\", \"glob\", \"lodash/defaultsDeep\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gqlToTypescript\"] = factory(require(\"graphql-tag\"), require(\"glob\"), require(\"lodash/defaultsDeep\"));\n\telse\n\t\troot[\"gqlToTypescript\"] = factory(root[undefined], root[undefined], root[undefined]);\n})(global, function(__WEBPACK_EXTERNAL_MODULE__5__, __WEBPACK_EXTERNAL_MODULE__6__, __WEBPACK_EXTERNAL_MODULE__9__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import gql from 'graphql-tag';\nimport * as path from 'path'\nimport * as fs from 'fs';\nimport * as glob from 'glob';\n\n/**\n * find the gql tag and gets it's value using regex\n * @param fileContent\n */\nexport function getTypeDefsFromFile(fileContent) {\n    // keep older regex versions please.\n    // *********8\n    // /(gql`)[\\S\\s]*?(`;|`\\s)/g; - had issues with template syntax (${}), and it captured itself.\n    // *********8\n    const reg = /(gql`)(?!\\))[A-Za-z0-9\\s{}\"!:\\(\\)_-]*?((?!\\()`;|(?!\\()`\\s)/g\n\n    let matches = reg.exec(fileContent);\n    if (!matches || matches.length === 0) {\n        return null;\n    }\n\n    let gqlTag = matches[0];\n    gqlTag = gqlTag.substr(0, gqlTag.lastIndexOf('`'));\n    gqlTag = gqlTag.substr(gqlTag.indexOf('`') + 1);\n    return gqlTag;\n}\n\n/**\n * returning a promise from the glob function and applies needed options\n * @param matcher\n */\nexport function getFileNamesFromGlob(matcher: string) {\n    return new Promise<Array<string>>((resolve, reject) => {\n        return glob(matcher, {}, (err, fileNames) => err ? reject(err) : resolve(fileNames))\n    })\n}\n\n/**\n * matches files, extract the graphql schema and use gql to create node trees\n * @param matcher\n * @param turnToNodeTree\n */\nexport function collectGQLTypeDefs(matcher: string, turnToNodeTree: boolean = true) {\n    return getFileNamesFromGlob(matcher)\n        .then(fileNames => {\n            // map files into gql definitions\n            return fileNames.map((filePath) => {\n                const content = fs.readFileSync(filePath, \"utf8\");\n                return getTypeDefsFromFile(content);\n            })\n             // filter out matching files without gql\n            .filter(item => item !== null)\n            .map((item) => {\n                return turnToNodeTree ? gql`${item}` : item\n            })\n        });\n}\n\n/**\n * Creates a file with the path to it's directory synchronously,\n * the file cam be emptied by passing true as the second parameter\n * @param filePath\n * @param makeSureEmpty\n */\nexport function ensureFileExistence(filePath: string, makeSureEmpty = true) {\n    const dirname = path.dirname(filePath);\n    if (!fs.existsSync(dirname)) {\n        fs.mkdirSync(dirname, { recursive: true });\n    }\n\n    const options = makeSureEmpty ? { flag: 'w+' } : {};\n    fs.writeFileSync(filePath, '', options);\n}\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","import {Mapper} from \"./types\";\n\n/**\n * gets the name of a given node\n * @param node\n */\nexport function getName(node) {\n    return node.name.value;\n}\n\n/**\n * get the kind of type from a node\n * @param node\n */\nexport function getTypeKind(node) {\n    return node.type.kind;\n}\n\n/**\n * gets the description from a node\n * @param node\n */\nexport function getDescription(node) {\n    return node.description ? node.description.value : null;\n}\n\n// handles type definition for Query/Mutation etc...\nfunction createTypeForFunction(node) {\n    const returnType = node.type.name.value;\n    const args = node.arguments.map((argNode) => {\n        const argName = getName(argNode);\n        const argType = getType(argNode);\n        const { type, required } = getTypeOptions(argType);\n        return {\n            name: argName,\n            required,\n            type\n        };\n    });\n    return {\n        kind: 'function',\n        args,\n        returnType\n    };\n}\n\n/**\n * gets the type of a node\n * @param node\n */\nexport function getType(node) {\n    if (node.kind === 'FieldDefinition' || node.kind === 'InputValueDefinition') {\n        const kind = getTypeKind(node);\n        let requiredValue = false;\n        let type = null;\n        if (kind === 'ListType') {\n            const childName = getName(node.type.type);\n            return `${childName}[]`;\n        } if (node.arguments && node.arguments.length > 0) {\n            return createTypeForFunction(node);\n        } else {\n            type = node.type.type ? getName(node.type.type) : getName(node.type);\n        }\n\n        if (node.type.kind === 'NonNullType') {\n            requiredValue = true;\n        }\n        return requiredValue ? type + '!' : type;\n    }\n}\n\n/**\n * returns a key value pait from an enum, optional description\n * @param enumNode\n */\nexport function getEnumKVP(enumNode) {\n    const name = getName(enumNode);\n    const output = {\n        key: name,\n        value: enumNode.values.map((val) => val.name.value)\n    };\n    const description = getDescription(enumNode);\n\n    if (description) {\n        output['description'] = {};\n        output['description'][name] = description;\n    }\n    return output;\n}\n\n/**\n * returns a key value pait from an object, optional description\n * @param objectNode\n * @param ignoreFields\n */\nexport function getObjectKVP(objectNode, ignoreFields: Mapper) {\n    const name = getName(objectNode);\n    const value = {};\n    const description = {};\n\n    const objectDescription = getDescription(objectNode);\n    if (objectDescription) {\n        description[name] = objectDescription;\n    }\n\n    objectNode.fields.forEach((field) => {\n        let kvp = null;\n        if (field.kind === 'FieldDefinition' || field.kind === 'InputValueDefinition') {\n            kvp = getFieldKVP(field, ignoreFields);\n        }\n\n        if (kvp) {\n            value[kvp.key] = kvp.value;\n            if (kvp.description) {\n                description[`${name}->${kvp.key}`] = kvp.description;\n            }\n        }\n    });\n    return {\n        key: name, value, description\n    }\n}\n\n/**\n * returns a key value pait from a field, optional description\n * @param node\n * @param ignoreFields\n */\nexport function getFieldKVP(node, ignoreFields: Mapper) {\n    const name = getName(node);\n    const value = getType(node);\n\n    if (!ignoreFields[name]) {\n        return {\n            key: name,\n            value,\n            description: getDescription(node)\n        };\n    }\n}\n\n/**\n * converts an array to an object that maps strings to booleans, to allow faster lookup in the array\n * @param arr\n */\nexport function arrayToTruthMapper(arr: Array<string>): Mapper {\n    const output = {};\n    arr.forEach((s) => {\n        output[s] = true;\n    });\n    return output;\n}\n\n/**\n * gets the options out of a defined type (our custom defined types):\n * graphql `name: String!` our type `string!` the typescript type `name: string`\n * graphql `name: String` our type `string` the typescript type `name: ?string`\n * @param type\n */\nexport function getTypeOptions(type) {\n    if (type.endsWith('!')) {\n        return {\n            type: type.substring(0, type.lastIndexOf('!')),\n            required: true\n        };\n    } else {\n        return {\n            type,\n            required: false\n        };\n    }\n}\n","import {collectGQLTypeDefs} from \"./helpers/files\";\nimport {GqlToTSConfig, GqlToTSFilesConfig, IKVP} from \"./helpers/types\";\nimport {arrayToTruthMapper, getEnumKVP, getObjectKVP} from \"./helpers/gqlNodeTools\";\nimport {TypescriptFileWriter} from \"./helpers/TypescriptFileWriter\";\n\nconst defaultsDeep = require('lodash/defaultsDeep');\n\nconst customTypes = {};\n\nconst defaultOptions = {\n    scalars: customTypes,\n    ignoreFields: ['_empty'],\n    ignoreTypes: [],\n    namespace: 'GraphqlTypes',\n    outputFile: 'types.ts',\n    silent: false\n};\n\nconst fileMessage = `/*\n*****************************************************\n* This file was auto generated by gql-to-typescript *\n*                  Type everything!                 *\n*****************************************************\n*/`;\n\nexport const getDefaultOption = () => Object.assign({}, defaultOptions);\n\nexport function convertFiles(matcher, options:GqlToTSFilesConfig = {}) {\n    return collectGQLTypeDefs(matcher)\n        .then((typeDefs) => {\n            convert(Object.assign(options, {typeDefs}))\n        });\n}\n\nexport function convert(options: GqlToTSConfig) {\n    const {typeDefs, scalars, ignoreFields, ignoreTypes, silent} = defaultsDeep(options, defaultOptions);\n\n    const ignoreMap = arrayToTruthMapper([...ignoreTypes, ...ignoreFields]);\n    const typedValues = defaultsDeep({\n        Boolean: 'boolean',\n        String: 'string',\n        ID: 'string|number',\n        Int: 'number',\n        Float: 'number'\n    }, scalars);\n\n    const state = {};\n    const descriptionState = {};\n\n    function assignToState(kvp: IKVP) {\n        const { key, value, description } = kvp;\n        if (state[key]) {\n            return defaultsDeep(state, { [key]: value })\n        }\n        // assign this as a new type\n        if (!typedValues[key]) {\n            typedValues[key] = key;\n        }\n\n        defaultsDeep(descriptionState, description);\n        state[key] = value;\n        return;\n    }\n\n    typeDefs.forEach(doc => {\n        doc.definitions.forEach((node) => {\n            switch (node.kind) {\n                case 'ObjectTypeDefinition':\n                case 'InputObjectTypeDefinition':\n                case 'ObjectTypeExtension':\n                    assignToState(getObjectKVP(node, ignoreMap));\n                    break;\n                case 'EnumTypeDefinition':\n                    assignToState(getEnumKVP(node));\n                    break;\n                default:\n                    return;\n            }\n        })\n    });\n\n    const writer = new TypescriptFileWriter(options, typedValues, fileMessage);\n    Object.entries(state).forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n            writer.writeEnum(key, value,descriptionState);\n        } else {\n            writer.writeInterface(key, value, descriptionState);\n        }\n    });\n    return writer.finish(silent);\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","import {FileWriter} from './FileWriter';\nimport {GqlToTSConfig, Mapper} from \"./types\";\nimport {getTypeOptions} from \"./gqlNodeTools\";\n\nconst path = require('path');\n\nexport class TypescriptFileWriter {\n    private fw: FileWriter;\n    private readonly fullFilePath: string;\n\n    constructor(private options: GqlToTSConfig, private typedValues: Mapper, startMessage: string) {\n        this.fullFilePath = path.join(options.outputFile);\n        this.fw = new FileWriter(this.fullFilePath);\n        this.fw.appendLine(startMessage);\n        if (options.namespace) {\n            this.fw\n                .appendLine(`export namespace ${options.namespace} {`);\n        }\n    }\n\n    append(str: string) {\n        this.fw.appendLine(str);\n        return this;\n    }\n\n    writeDescription(indentation: string, description: string) {\n        if (description) {\n            this.append(`${indentation}/* ${description} */`)\n        }\n    }\n\n    writeEnum(name: string, enumarations: Array<string>, descriptionMap: Mapper) {\n        this.writeDescription(`\\t`, descriptionMap[name]);\n        this.append(`\\texport enum ${name} {`)\n        enumarations.forEach(e => this.append(`\\t\\t${e},`));\n        this.append('\\t}')\n    }\n\n    private fixTyping(unknownType: string) {\n        return this.typedValues[unknownType] || 'any';\n    }\n\n    private createAdvancedInterfaceField(label: string, rawType: any) {\n        let advancedType = 'any';\n        if (rawType.kind === 'function') {\n            const {returnType, args} = rawType;\n            const printableArguments = args.map(({name, required, type}) => {\n                return `${name}${required ? '' : '?'}: ${this.fixTyping(type)}`;\n            }).join(', ');\n            advancedType = `(${printableArguments}) => ${this.fixTyping(returnType)}`;\n        } else {\n            // unknown field...\n            console.warn(`unknown field ${label}`);\n        }\n        return `\\t\\t${label}?: ${advancedType};`;\n    }\n\n    private createRegularInterfaceField(label: string, rawType: string) {\n        const {type, required} = getTypeOptions(rawType);\n        return `\\t\\t${label}${required ? '' : '?'}: ${this.fixTyping(type)};`;\n    }\n\n    writeInterface(name: string, data: Mapper, descriptionMap: Mapper) {\n        this.writeDescription(`\\t`, descriptionMap[name]);\n        this.append(`\\texport interface ${name} {`);\n        Object.entries(data).forEach(([label, rawType]) => {\n            this.writeDescription(`\\t`, descriptionMap[`${name}->${label}`]);\n            if (typeof rawType === \"string\") {\n                this.append(this.createRegularInterfaceField(label, rawType))\n            } else {\n                this.append(this.createAdvancedInterfaceField(label, rawType))\n            }\n        });\n        this.append('\\t}')\n    }\n\n    finish(silent: boolean = false) {\n        const {options: {namespace}, fullFilePath} = this;\n        return this.fw\n            .appendLine('}')\n            .appendLine('')\n            .finish()\n            .then(() => {\n                if (!silent) {\n                    console.log(`\n                The types file was saved!.\n                You can import it like so:\n                import { ${namespace} } from '${fullFilePath}';\n            `);\n                }\n            })\n    }\n}\n","import {ensureFileExistence} from \"./files\";\n\nconst fs = require('fs');\n\n/**\n * abstracts the process of writing data into a file\n */\nexport class FileWriter {\n    constructor(private filePath) {\n        ensureFileExistence(filePath);\n    }\n    public appendLine(str: string) {\n        fs.appendFileSync(this.filePath, `\\n${str}`);\n        return this;\n    }\n    public finish() {\n        return Promise.resolve()\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;"],"sourceRoot":""}